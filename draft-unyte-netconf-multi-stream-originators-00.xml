<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-unyte-netconf-multi-stream-originators-00"
     ipr="trust200902">
  <front>
    <title abbrev="Multiple Steam Originators">Subscription to Multiple Stream
    Originators</title>

    <author fullname="Tianran Zhou" initials="T." surname="Zhou">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street>156 Beiqing Rd., Haidian District</street>

          <city>Beijing</city>

          <region/>

          <code/>

          <country>China</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>zhoutianran@huawei.com</email>

        <uri/>
      </address>
    </author>

    <author fullname="Guangying Zheng" initials="G." surname="Zheng">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street>101 Yu-Hua-Tai Software Road</street>

          <city>Nanjing</city>

          <code/>

          <region>Jiangsu</region>

          <country>China</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>zhengguangying@huawei.com</email>
      </address>
    </author>

    <author fullname="Eric Voit" initials="E." surname="Voit">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <region/>

          <country>United States of America</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>evoit@cisco.com</email>
      </address>
    </author>

    <author fullname="Alexander Clemm" initials="A." surname="Clemm">
      <organization>Futurewai</organization>

      <address>
        <postal>
          <street>2330 Central Expressway</street>

          <city>Santa Clara</city>

          <region>California</region>

          <code/>

          <country>United States of America</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>ludwig@clemm.org</email>

        <uri/>
      </address>
    </author>

    <author fullname="Thomas Graf" initials="T." surname="Graf">
      <organization>Swisscom</organization>

      <address>
        <postal>
          <street>Binzring 17</street>

          <city>Zuerich  8045</city>

          <region/>

          <code/>

          <country>Switzerland</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>thomas.graf@swisscom.com</email>

        <uri/>
      </address>
    </author>

    <author fullname="Pierre Francois" initials="P." surname="Francois">
      <organization>INSA-Lyon</organization>

      <address>
        <postal>
          <street/>

          <city>Lyon</city>

          <region/>

          <code/>

          <country>France</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>pierre.francois@insa-lyon.fr</email>

        <uri/>
      </address>
    </author>
	
    <date day="9" month="March" year="2020"/>

    <workgroup>NETCONF</workgroup>

    <abstract>
      <t>This document describes the distributed data export mechanism that
      allows multiple data streams to be managed by using a single
      subscription. Specifically, device can decide to decompse one
      subscription into multiple subscriptions to the line-cards. So that each
      line-card can directly push data to the collector without passing
      through a broker for internal consolidation. And the device can indicate
      the subscription decomposition result to the receiver to check the data
      integrity.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>Streaming telemetry refers to sending a continuous stream of
      operational data from a device to a remote receiver. This provides an
      ability to monitor a network from remote and to provide network
      analytics. Devices generate telemetry data and push that data to a
      collector for further analysis. By streaming the data, much better
      performance, finer-grained sampling, monitoring accuracy, and bandwidth
      utilization can be achieved than with polling-based alternatives.</t>

      <t>Mechanisms to support subscription to event notifications have been
      defined in<xref target="RFC8639"/> and <xref target="RFC8641"/>. The
      current design involves subscription to a single push server. This
      conceptually centralized model encounters efficiency limitations in
      cases where the data sources are themselves distributed, such as line
      cards in a piece of network equipment. In such cases, it will be a lot
      more efficient to have each data source (e.g., each line card) originate
      its own stream of updates, rather than requiring updates to be tunneled
      through a central server where they are combined. What is needed is a
      distributed mechanism that allows to directly push multiple individual
      data substreams, without needing to first pass them through an
      additional processing stage for internal consolidation, but still
      allowing those substreams to be managed and controlled via a single
      subscription.</t>

      <t>This document will describe such distributed data export mechanism
      and how it can work by extending existing push mechanism. Specifically,
      device can decide to decompse one subscription into multiple
      subscriptions to the line-cards. So that each line-card can directly
      push data to the collector without passing through a broker for internal
      consolidation. And the device can indicate the subscription
      decomposition result to the receiver to check the data integrity. The
      proposal will focus on the scenario when data collection from devices
      with main-board and line-cards. It could be generalized to other
      distributed data export scenarios.</t>
    </section>

    <section title="Data Collection from Devices with Main-board and Line-cards">
      <t>For data collection from devices with main-board and line-cards,
      existing push solutions consider only one push server typically reside
      in the main board. As shown in the following figure, data are collected
      from line cards and aggregate to the main board as one consolidated
      stream. So the main board can easily become the performance bottle-neck.
      The optimization is to apply the distributed data export mechanism which
      can directly push data from line cards to a collector. On one hand, this
      will reduce the cost of scarce compute and memory resources on the main
      board for data processing and assembling. On the other hand, distributed
      data push can off-load the streaming traffic to multiple interfaces.</t>

      <t><figure
          title="Fig. 1 Data Collection from Devices with Main-board and Line-cards">
          <artwork align="center"><![CDATA[
+-------------------------------------+
|              collector              |
+------^-----------^-----------^------+
       |           |           |
       |           |           |
+-------------------------------------+
|      |           |           |      |
|      |     +-----+------+    |      |
|      |     | main board |    |      |
|      |     +--^-----^---+    |      |
|      |        |     |        |      |
|      |    +---+     +---+    |      |
|      |    |             |    |      |
| +----+----+---+     +---+----+----+ |
| | line card 1 |     | line card 2 | |
| +-------------+     +-------------+ |
|               device                |
+-------------------------------------+
]]></artwork>
        </figure></t>

      <t/>
    </section>

    <section title="Terminologies">
      <t>The following terms are defined in <xref target="RFC8639"/> and are
      not redefined here:</t>

      <t>Subscriber</t>

      <t>Publisher</t>

      <t>Receiver</t>

      <t>Subscription</t>

      <t>In addition, this document defines the following terms:</t>

      <t>Global Subscription: the Subscription requested by the subscriber. It
      may be decomposed into multiple Component Subscriptions.</t>

      <t>Component Subscription: is the Subscription that defines the data
      from each individual telemetry source which is managed and controlled by
      a single Publisher.</t>

      <t>Global Capability: is the overall subscription capability that the
      group of Publishers can expose to the Subscriber.</t>

      <t>Component Capability: is the subscription capability that each
      Publisher can expose to the Subscriber.</t>

      <t>Master: is the Publisher that interacts with the Subscriber to deal
      with the Global Subscription. It decomposes the Global Subscription to
      multiple Component Subscriptions and interacts with the Agents.</t>

      <t>Agent: is the Publisher that interacts with the Master to deal with
      the Component Subscription.</t>
    </section>

    <section title="Solution Overview">
      <t>Figure 2 below shows the distributed data export framework.</t>

      <t>A collector usually includes two components,</t>

      <t><list style="symbols">
          <t>the Subscriber generates the subscription instructions to express
          what and how the collector want to receive the data;</t>

          <t>the Receiver is the target for the data publication.</t>
        </list></t>

      <t>For one subscription, there may be one to many Receivers. And the
      Subscriber does not necessarily share the same address with the
      Receivers.</t>

      <t>In this framework, the Publisher pushes data to the Receiver
      according to the subscription information. The Publisher has the Master
      role and the Agent role. The Master knows all the capabilities that the
      attached Agents and itself can provide, and exposes the Global
      Capability to the collector. The collector cannot see the Agents
      directly, so it will only send the Global Subscription information to
      the Master. The Master disassembles the Global Subscription to multiple
      Component Subscriptions, each involving data from a separate telemetry
      source. The Component Subscriptions are then distributed to the
      corresponding Agents.</t>

      <t>When data streaming, the Publisher collects and encapsulates the
      packets per the Component Subscription, and pushes the piece of data
      which can serve directly to the designated data collector. The collector
      is able to assemble many pieces of data associated with one Global
      Subscription, and can also deduce the missing pieces of data.</t>

      <t><figure title="Fig. 2 The Distributed Data Export Framework">
          <artwork align="center"><![CDATA[
+-----------------------------------------+
|        Collector        |-------------+ |
|                        +------------+ | |
|      +------------+    || Receiver  | | |
|      | Subscriber |    |--------------+ |
|      +-----^-+----+    +-----^------^   |
|            | |               |      |   |
+-----------------------------------------+
   Global    | | Global        |      |
   Capability| | Subscription  |      |
+-----------------------------------------+
|            | |          Push |      |   |
|   +--------+-v---------------+---+  |   |
|   |       Publisher(Master)      |  |   |
|   +--------^-+-------------------+  |   |
|            | |                      |   |
|            | |                      |   |
|  Component | | Component       Push |   |
|  Capability| | Subscription         |   |
|   +--------+-v-------------------+  |   |
|   |       Publisher(Agent)       +--+   |
|   +------------------------------+      |
|                                         |
|                Device                   |
+-----------------------------------------+

]]></artwork>
        </figure></t>

      <t>Master and Agents may interact with each other in several ways: <list
          style="symbols">
          <t>Agents need to have a registration or announcement handshake with
          the Master, so the Master is aware of them and of life-cycle events
          (such as Agent appearing and disappearing).</t>

          <t>Contracts are needed between the Master and each Agent on the
          Component Capability, and the format for streaming data
          structure.</t>

          <t>The Master relays the component subscriptions to the Agents.</t>

          <t>The Agents indicate status of Component Subscriptions to the
          Master. The status of the overall subscription is maintained by the
          Master. The Master is also responsible for notifying the subscriber
          in case of any problems of Component Subscriptions.</t>
        </list>Any technical mechanisms or protocols used for the coordination
      of operational information between Master and Agent is out-of-scope of
      this document. We will need to instrument the results of this
      coordination on the Master.</t>
    </section>

    <section title="Subscription Decomposition">
      <t>The Collector can only subscribe to the Master. This requires the
      Master to:</t>

      <t><list style="numbers">
          <t>expose the Global Capability that can be served by multiple
          Publishers;</t>

          <t>disassemble the Global Subscription to multiple Component
          Subscriptions, and distribute them to the corresponding telemetry
          sources;</t>

          <t>notify on changes when portions of a subscription moving between
          different Agents over time.</t>
        </list></t>

      <t>The Master can keep track of the mapping between the resource and the
      corresponding location of the Publisher which commits to serve the data.
      If a Publisher does not have external connectivity or permission to
      export, the master MUST NOT decompose a component subscription to that
      Publisher. In some implementations, the Global Subscription can be
      disassembled into multiple Component Subscriptions according to the
      Resource-Location Table, and the corresponding location can be
      associated. The decision whether to decompose a Global Subscription into
      multiple Component Subscriptions rests with the Resource-Location Table.
      A Master can decide to not decompose a Global Subscription at all and
      push a single stream to the receiver, because the location information
      indicates the Global Subscription can be served locally by the Master.
      Similarly, it can decide to entirely decompose a Global Subscription
      into multiple Component Subscriptions that each push their own streams,
      but not from the Master. It can also decide to decompose the Global
      Subscription into several Component Subscriptions and retain some
      aspects of the Global Subscription itself, also pushing its own
      stream.</t>

      <t>Component Subscriptions belonging to the same Global Subscription
      MUST NOT overlap. The combination of all Component Subscriptions MUST
      cover the same range of nodes as the Global Subscription. Also, the same
      subscription settings apply to each Component Subscription, i.e., the
      same receivers, the same time periods, the same encodings are applied to
      each Component Subscription per the settings of the Global
      Subscription.</t>

      <t>Each Component Subscription in effect constitutes a full-fledged
      subscription, with the following constraints:</t>

      <t><list style="symbols">
          <t>Component subscriptions are system-controlled, i.e. managed by
          the Master, not by the subscriber.</t>

          <t>Component subscription settings such as time periods, dampening
          periods, encodings, receivers adopt the settings of their Global
          Subscription.</t>

          <t>The life-cycle of the Component Subscription is tied to the
          life-cycle of the Global Subscription. Specifically,
          terminating/removing the Global Subscription results in
          termination/removal of Component Subscriptions.</t>

          <t>The Component Subscriptions share the same Subscription ID as the
          Global Subscription.</t>
        </list></t>
    </section>

    <section title="Publication Composition">
      <t>The Publisher collects data and encapsulates the packets per the
      Component Subscription. There are several potential encodings, including
      XML, JSON, CBOR and GPB. The format and structure of the data records
      are defined by the YANG schema, so that the composition at the Receiver
      can benefit from the structured and hierarchical data instance.</t>

      <t>The Receiver is able to assemble many pieces of data associated with
      one subscription, and can also deduce the missing pieces of data. The
      Receiver recognizes data records associated with one subscription
      according the <xref target="RFC8639">Subscription ID</xref>. Data
      records generated per one subscription are assigned with the same
      Subscription ID.</t>

      <t>For the periodic updates, records are produced periodically from each
      Publisher. The message arrival time varies because of the distributed
      nature of the publication. The Receiver assembles data generated at the
      same time period based on the recording time consisted in each data
      record. In this case, time synchronization is required for all the
      Publishers.</t>

      <t><xref target="I-D.ietf-netconf-notification-messages">Message
      Generator ID</xref> is the identifier for the process which created the
      notification message. It's contained in every notification messages, and
      allows disambiguation of different line cards sending the messages. This
      document, in addition, requires the device to notify collector the set
      of Message Generator IDs standing for the Publishers serving for one
      Global Subscription. So that the collector can easily check the
      integrity of the data collected from different Publishers at the same
      time period. And the collector can deduce the Publishers which are
      responsible for the missing pieces of data.</t>

      <t>For the dynamic subscription, the output of the
      "establish-subscription" RPC defined in <xref target="RFC8639"/> MUST
      include a list of Message Generator IDs to indicate how the Global
      Subscription is decomposed into several Component Subscriptions.</t>

      <t>The "subscription-started" and "subscription-modified" notification
      defined in <xref target="RFC8639"/> MUST also include a list of Message
      Generator IDs to notify the current Publishers for the corresponding
      Global Subscription.</t>
    </section>

    <section title="Subscription State Change Notifications">
      <t>In addition to sending event records to receivers, the Master MUST
      also send <xref target="RFC8639">subscription state change
      notifications</xref> when events related to subscription management have
      occurred. All the subscription state change notifications MUST be
      delivered by the Master.</t>

      <t>When the subscription decomposition result changed, the
      "subscription-modified" notification MUST be sent to indicate the new
      list of Publishers.</t>
    </section>

    <section title="Publisher Configurations">
      <t>This document assumes all the Publishers are preconfigured to be able
      to push data. The actual working Publishers are selected dynamically
      based on the subscription decomposition result. For UDP Publishers, the
      virtual IP address could be assigned for the publication. So all the UDP
      Publishers on the device can use the same source IP address configured,
      which may even not routeable. For connection based Publishers, e.g.,
      <xref target="I-D.ietf-netconf-https-notif">HTTPS-based
      transport</xref>, each Publisher MUST be able to receive packets from
      the receivers. This document does not restrict the way how the
      Publishers are accessible.</t>

      <t>The specific configuration on transports is out of the scope of this
      document.</t>
    </section>

    <section title="YANG Tree">
      <t/>

      <t><figure>
          <artwork><![CDATA[
module: ietf-multiple-stream-originators
  augment /sn:subscriptions/sn:subscription:
    +--ro message-generator-id*   string
  augment /sn:subscription-started:
    +--ro message-generator-id*   string
  augment /sn:subscription-modified:
    +--ro message-generator-id*   string
  augment /sn:establish-subscription/sn:output:
    +--ro message-generator-id*   string
]]></artwork>
        </figure></t>
    </section>

    <section title="YANG Module">
      <t/>

      <t><figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-multiple-stream-originators@2020-02-26.yang"
module ietf-multiple-stream-originators {
  yang-version 1.1;
  namespace 
    "urn:ietf:params:xml:ns:yang:ietf-multiple-stream-originators";
  prefix mso;
  import ietf-subscribed-notifications {
    prefix sn;
  }

  organization "IETF NETCONF (Network Configuration) Working Group";
  contact
    "WG Web:   <http:/tools.ietf.org/wg/netconf/>
     WG List:  <mailto:netconf@ietf.org>

     Editor:   Tianran Zhou
               <mailto:zhoutianran@huawei.com>
     
     Editor:   Guangying Zheng
               <mailto:zhengguangying@huawei.com>";


  description
    "Defines augmentation for ietf-subscribed-notifications to enable 
     the distributed publication with single subscription.

    Copyright (c) 2018 IETF Trust and the persons identified as authors
    of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, is permitted pursuant to, and subject to the license
    terms contained in, the Simplified BSD License set forth in Section
    4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC XXXX; see the RFC

    itself for full legal notices.";

  revision 2020-02-26 {
    description
      "Initial version";
    reference
      "RFC XXXX: Subscription to Multiple Stream Originators";
  }

  grouping message-generator-ids {
    description
      "Provides a reusable list of message-generator-ids.";
    
    leaf-list message-generator-id {
      type string;
      config false;
      ordered-by user;
      description
        "Software entity which created the message (e.g.,
         linecard 1). This field is used to notify the 
         collector the working originator.";
    }
  }

  augment "/sn:subscriptions/sn:subscription" {
    description
      "This augmentation allows the message generators to be exposed
       for a subscription.";

    uses message-generator-ids;
  }
 
  augment "/sn:subscription-started" {
    description
      "This augmentation allows MSO specific parameters to be
       exposed for a subscription.";

    uses message-generator-ids;
  }

  augment "/sn:subscription-modified" {
    description
      "This augmentation allows MSO specific parameters to be
       exposed for a subscription.";

    uses message-generator-ids;
  }

  augment "/sn:establish-subscription/sn:output" {
    description
      "This augmentation allows MSO specific parameters to be
       exposed for a subscription.";
    
    uses message-generator-ids;
  }
}
<CODE ENDS>
]]></artwork>
        </figure></t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document registers the following namespace URI in the <xref
      target="RFC3688">IETF XML Registry</xref>:</t>

      <t><list style="empty">
          <t>URI:
          urn:ietf:params:xml:ns:yang:ietf-multiple-stream-originators</t>

          <t>Registrant Contact: The IESG.</t>

          <t>XML: N/A; the requested URI is an XML namespace.</t>
        </list>This document registers the following YANG module in the <xref
      target="RFC3688">YANG Module Names registry</xref>:</t>

      <t><list style="empty">
          <t>Name: ietf-multiple-stream-originators</t>

          <t>Namespace:
          urn:ietf:params:xml:ns:yang:ietf-multiple-stream-originators</t>

          <t>Prefix: mso</t>

          <t>Reference: RFC XXXX</t>
        </list></t>
    </section>

    <section title="Transport Considerations">
      <t>The distributed data export mechanism enabled by this draft is
      expected to generate more data than <xref
      target="RFC8641">YANG-Push</xref>. The large amount of data may congest
      the network and impact other network business. In this case, the
      collector may also not be able to accept all the data. So the congestion
      control method is required for any transport that is going to implement
      the solution proposed in this document.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>The YANG module specified in this document defines a schema for data
      that is designed to be accessed via network management protocols such as
      <xref target="RFC6241">NETCONF</xref> or <xref
      target="RFC8040">RESTCONF</xref>. The lowest NETCONF layer is the secure
      transport layer, and the mandatory-to-implement secure transport is
      <xref target="RFC6242">Secure Shell (SSH)</xref>. The lowest RESTCONF
      layer is HTTPS, and the mandatory-to-implement secure transport is <xref
      target="RFC5246">TLS</xref>.</t>

      <t>The NETCONF <xref target="RFC6536">Access Control Model (NACM)</xref>
      provides the means to restrict access for particular NETCONF or RESTCONF
      users to a preconfigured subset of all available NETCONF or RESTCONF
      protocol operations and content.</t>

      <t>The new data nodes introduced in this YANG module may be considered
      sensitive or vulnerable in some network environments. It is thus
      important to control read access (e.g., via get-config or notification)
      to this data nodes. These are the subtrees and data nodes and their
      sensitivity/vulnerability:</t>

      <t><list style="symbols">
          <t>/subscriptions/subscription/message-generator-ids</t>
        </list>The entries in the two lists above will show where subscribed
      resources might be located on the publishers. Access control MUST be set
      so that only someone with proper access permissions has the ability to
      access this resource.</t>

      <t>Other Security Considerations is the same as those discussed in <xref
      target="RFC8641">YANG-Push</xref>.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>We thank Kent Watsen, Mahesh Jethanandani, Martin Bjorklund, Tim
      Carey and Qin Wu for their constructive suggestions for improving this
      document.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include='reference.RFC.5246'?>

      <?rfc include='reference.RFC.3688'?>

      <?rfc include='reference.RFC.6241'?>

      <?rfc include='reference.RFC.8040'?>

      <?rfc include='reference.RFC.8639'?>

      <?rfc include='reference.RFC.8641'?>

      <?rfc include='reference.RFC.6536'?>

      <?rfc include='reference.RFC.6242'?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.I-D.ietf-netconf-notification-messages"?>

      <?rfc include='reference.I-D.ietf-netconf-https-notif'?>
    </references>

    <section title="Examples">
      <t>This appendix is non-normative.</t>

      <section title="Dynamic Subscription">
        <t>Figure 3 shows a typical dynamic subscription to the device with
        distributed data export capability.</t>

        <t><figure title="Fig. 3 Call Flow for Dynamic Subscription">
            <artwork><![CDATA[
+-------------+                 +-------------+ +-------------+
| Subscriber/ |                 |  Publisher  | |  Publisher  |
| Receiver    |                 |  (Master)   | |  (Agent)    |
+-------------+                 +------+------+ +------+------+
       |                               |               |
       | establish-subscription        |               |
       +------------------------------>+ component     |
       |                               | subscription  |
       | RPC Reply: OK, id #22         +-------------->+
       | message generator ID [#1, #2] |               |
       +<------------------------------+               |
       |                               |               |
       | notif-mesg, id #22            |               |
       | message generator ID #1       |               |
       +<------------------------------+               |
       |                               |               |
       | notif-mesg, id#22             |               |
       | message generator ID #2       |               |
       +<----------------------------------------------+
       |                               |               |
       | modify-subscription (id#22)   |               |
       +------------------------------>+ component     |
       |                               | subscription  |
       | RPC Reply: OK, id #22         +-------------->+
       +<------------------------------+               |
       |                               |               |
       | subscription-modified, id#22  |               |
       | message generator ID [#1]     |               |
       +<------------------------------+               |
       |                               |               |
       | notif-mesg, id #22            |               |
       | message generator ID #1       |               |
       +<------------------------------+               |
       |                               |               |
       |                               |               |
       +                               +               +
]]></artwork>
          </figure></t>

        <t>A "establish-subscription" RPC request as per <xref
        target="RFC8641"/> is sent to the Master with a successful response.
        An example of using NETCONF might look like:</t>

        <t><figure title="Fig. 4 &quot;establish-subscription&quot; Request">
            <artwork><![CDATA[
<netconf:rpc message-id="101"
     xmlns:netconf="urn:ietf:params:xml:ns:netconf:base:1.0">
   <establish-subscription
       xmlns="urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications"
       xmlns:yp="urn:ietf:params:xml:ns:yang:ietf-yang-push">
     <yp:datastore
          xmlns:ds="urn:ietf:params:xml:ns:yang:ietf-datastores">
       ds:operational
     </yp:datastore>
     <yp:datastore-xpath-filter
         xmlns:ex="https://example.com/sample-data/1.0">
       /ex:foo
     </yp:datastore-xpath-filter>
     <yp:periodic>
       <yp:period>500</yp:period>
     </yp:periodic>
   </establish-subscription>
 </netconf:rpc>]]></artwork>
          </figure>As the device is able to fully satisfy the request, the
        request is given a subscription ID of 22. The response as in Figure 5
        indicates that the subscription is decomposed into two component
        subscriptions which will be published by two message generators: #1
        and #2.</t>

        <t><figure
            title="Fig. 5 &quot;establish-subscription&quot; Positive RPC Response">
            <artwork><![CDATA[<rpc-reply message-id="101"
   xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
   <id
    xmlns="urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications">
      22
   </id>
   <message-generator-id
    xmlns="urn:ietf:params:xml:ns:yang:ietf-multiple-stream-originators>
      1
   </message-generator-id>
   <message-generator-id
    xmlns="urn:ietf:params:xml:ns:yang:ietf-multiple-stream-originators>
      2
   </message-generator-id>
</rpc-reply>]]></artwork>
          </figure>Then, both Publishers send notifications with the
        corresponding piece of data to the receiver.</t>

        <t>The subscriber may invoke the "modify-subscription" RPC for a
        subscription it previously established. The RPC has no difference to
        the single publisher case as in [RFC8641]. Figure 6 provides an
        example where a subscriber attempts to modify the period and datastore
        XPath filter of a subscription using NETCONF.</t>

        <t><figure title="Fig. 6 &quot;modify-subscription&quot; Request">
            <artwork><![CDATA[     <rpc message-id="102"
          xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
       <modify-subscription
           xmlns=
             "urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications"
           xmlns:yp="urn:ietf:params:xml:ns:yang:ietf-yang-push">
         <id>22</id>
         <yp:datastore
             xmlns:ds="urn:ietf:params:xml:ns:yang:ietf-datastores">
           ds:operational
         </yp:datastore>
         <yp:datastore-xpath-filter
             xmlns:ex="https://example.com/sample-data/1.0">
           /ex:bar
         </yp:datastore-xpath-filter>
         <yp:periodic>
           <yp:period>250</yp:period>
         </yp:periodic>
        </modify-subscription>
     </rpc>]]></artwork>
          </figure></t>

        <t>If the modification is successfully accepted, the
        "subscription-modified" subscription state notification is sent to the
        subscriber by the Master. The notification, Figure 7 for example,
        indicates the modified subscription is decomposed into one component
        subscription which will be published by message generator #1.</t>

        <t><figure
            title="Fig. 7 &quot;subscription-modified&quot; Subscription State Notification">
            <artwork><![CDATA[<notification xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
  <eventTime>2007-09-01T10:00:00Z</eventTime>
  <subscription-modified
      xmlns="urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications"
      xmlns:yp="urn:ietf:params:xml:ns:yang:ietf-yang-push">
    <id>22</id>
    <yp:datastore
        xmlns:ds="urn:ietf:params:xml:ns:yang:ietf-datastores">
      ds:operational
    </yp:datastore>
    <yp:datastore-xpath-filter
        xmlns:ex="https://example.com/sample-data/1.0">
      /ex:bar
    </yp:datastore-xpath-filter>
    <yp:periodic>
        <yp:period>250</yp:period>
    </yp:periodic>
    <message-generator-id
    xmlns="urn:ietf:params:xml:ns:yang:ietf-multiple-stream-originators>
       1
    </message-generator-id>    
  </subscription-modified>
</notification>]]></artwork>
          </figure></t>

        <t/>
      </section>

      <section title="Configured Subscription">
        <t>Figure 8 shows a typical configured subscription to the device with
        distributed data export capability.</t>

        <t/>

        <t><figure title="Fig. 8 Call Flow for Configured Subscription">
            <artwork><![CDATA[
+-------------+                 +-------------+ +-------------+
| Receiver    |                 |  Publisher  | |  Publisher  |
|             |                 |  (Master)   | |  (Agent)    |
+------+------+                 +------+------+ +------+------+
       |                               |               |
       | subscription-started, id#39   |               |
       | message generator ID [#1, #2] |               |
       +<------------------------------+               |
       |                               |               |
       | notif-mesg, id#39             |               |
       | message generator ID #1       |               |
       +<------------------------------+               |
       |                               |               |
       | notif-mesg, id#39             |               |
       | message generator ID #2       |               |
       +<----------------------------------------------+
       |                               |               |
       |                               |               |
       |                               |               |
]]></artwork>
          </figure></t>

        <t>Before starting to push data, the "subscription-started"
        subscription state notification is sent to the receiver. The following
        example assumes the NETCONF transport has already established. The
        notification indicates that the configured subscription is decomposed
        into two component subscriptions which will be published by two
        message generators: #1 and #2.</t>

        <t><figure
            title="Fig. 9 &quot;subscription-started&quot; Subscription State Notification">
            <artwork><![CDATA[
<notification xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
  <eventTime>2007-09-01T10:00:00Z</eventTime>
  <subscription-started
      xmlns="urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications"
      xmlns:yp="urn:ietf:params:xml:ns:yang:ietf-yang-push">
    <identifier>39</identifier>
    <yp:datastore
        xmlns:ds="urn:ietf:params:xml:ns:yang:ietf-datastores">
      ds:operational
    </yp:datastore>
    <yp:datastore-xpath-filter
        xmlns:ex="https://example.com/sample-data/1.0">
      /ex:foo
    </yp:datastore-xpath-filter>
    <yp:periodic>
        <yp:period>250</yp:period>
    </yp:periodic>
    <message-generator-id
    xmlns="urn:ietf:params:xml:ns:yang:ietf-multiple-stream-originators>
       1
    </message-generator-id>
    <message-generator-id
    xmlns="urn:ietf:params:xml:ns:yang:ietf-multiple-stream-originators>
       2
    </message-generator-id>
  </subscription-started>
</notification>]]></artwork>
          </figure></t>

        <t>Then, both Publishers send notifications with the corresponding
        piece of data to the receiver.</t>
      </section>
    </section>

  </back>
</rfc>
